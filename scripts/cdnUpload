#!/usr/bin/env node

// this needs to run from the webppl root (not the scripts directory)
// this also assumes that AWS credentials are available from environment or live in ~/.aws/credentials

'use strict';

var fs = require('fs');
var AWS = require('aws-sdk');
var zlib = require('zlib');
var execSync = require('child_process').execSync;
var _ = require('underscore');

function git(cmd) {
  return function(dir) {
    var options = { cwd: dir, stdio: [] };
    return execSync('git ' + cmd, options).toString().trim();
  };
}

function catchAll(fn) {
  return function(arg) {
    try {
      return fn(arg);
    } catch (e) {
      return '';
    }
  };
}

var version = catchAll(git('rev-parse --short HEAD'))('.');

AWS.config.update({region: 'us-west-2'});


var getFile = function(name) {
  return fs.createReadStream(name).pipe(zlib.createGzip());
}

var s3 = new AWS.S3()
var upload = function(params) {
  params = _.defaults(params,
                      {ACL: 'public-read',
                       Bucket: 'cdn.webppl.org',
                       ContentEncoding: 'gzip'
                      })

  s3.upload(params)
    .on('httpUploadProgress', function(evt) {
      console.log('Uploading: ')
      console.log(evt);
      console.log('\n');
    })
    .send(function(err, data) {
      if (err) {
        console.log('Error uploading:')
        console.log(err);
      } else {
        console.log('Success:');
        console.log(data);
      }
    });
}

var jsParams = {
  Key: 'webppl-editor-' + version + '.js',
  Body: getFile('bundle/webppl-editor.js'),
  ContentType: 'application/javascript'
};
upload(jsParams);

var cssParams = {
  Key: 'webppl-editor-' + version + '.css',
  Body: getFile('bundle/webppl-editor.css'),
  ContentType: 'text/css'
};
upload(cssParams);